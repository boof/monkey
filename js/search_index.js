var search_data = {"index":{"searchIndex":["object","refinementmonkey","methodwrapper","refinements","repository","teachings","/()","[]()","commit()","dig()","each()","each_method()","fetch()","first()","inspect()","inspect()","inspect()","instance_method()","last()","learn()","max_of()","min_of()","new()","new()","new()","new()","new()","patch()","patches()","pretty_print()","pretty_print()","pretty_print()","read()","sig()","singleton_method()","to_s()","to_s()","to_s()","underscore()","values()","values_at()","|()","changelog","license","readme"],"longSearchIndex":["object","refinementmonkey","refinementmonkey::methodwrapper","refinementmonkey::refinements","refinementmonkey::repository","refinementmonkey::teachings","refinementmonkey#/()","refinementmonkey#[]()","refinementmonkey::repository#commit()","refinementmonkey::repository#dig()","refinementmonkey::repository#each()","refinementmonkey::methodwrapper::each_method()","refinementmonkey::repository#fetch()","object#first()","refinementmonkey#inspect()","refinementmonkey::methodwrapper#inspect()","refinementmonkey::repository#inspect()","refinementmonkey::methodwrapper::instance_method()","object#last()","refinementmonkey#learn()","object#max_of()","object#min_of()","refinementmonkey::new()","refinementmonkey::methodwrapper::new()","refinementmonkey::refinements::new()","refinementmonkey::repository::new()","refinementmonkey::teachings::new()","refinementmonkey#patch()","refinementmonkey#patches()","refinementmonkey#pretty_print()","refinementmonkey::methodwrapper#pretty_print()","refinementmonkey::repository#pretty_print()","refinementmonkey::teachings#read()","refinementmonkey::methodwrapper#sig()","refinementmonkey::methodwrapper::singleton_method()","refinementmonkey#to_s()","refinementmonkey::methodwrapper#to_s()","refinementmonkey::repository#to_s()","object#underscore()","refinementmonkey::repository#values()","refinementmonkey::repository#values_at()","refinementmonkey::refinements#|()","","",""],"info":[["Object","","classes/Object.html","",""],["RefinementMonkey","","classes/RefinementMonkey.html","",""],["RefinementMonkey::MethodWrapper","","classes/RefinementMonkey/MethodWrapper.html","",""],["RefinementMonkey::Refinements","","classes/RefinementMonkey/Refinements.html","",""],["RefinementMonkey::Repository","","classes/RefinementMonkey/Repository.html","",""],["RefinementMonkey::Teachings","","classes/RefinementMonkey/Teachings.html","",""],["/","RefinementMonkey","classes/RefinementMonkey.html#method-i-2F","(owner)","<p>Loads all refinements for owner into a Refinements module.\n<p>Examples\n\n<pre><code>using Monkey/String\n</code></pre>\n"],["[]","RefinementMonkey","classes/RefinementMonkey.html#method-i-5B-5D","(sig)","<p>Loads specific method matching sig into a Refinements module.\n<p>sig &mdash; Signature for specific method.\n\n<p>Examples …\n"],["commit","RefinementMonkey::Repository","classes/RefinementMonkey/Repository.html#method-i-commit","(method)",""],["dig","RefinementMonkey::Repository","classes/RefinementMonkey/Repository.html#method-i-dig","(owner, name)",""],["each","RefinementMonkey::Repository","classes/RefinementMonkey/Repository.html#method-i-each","()",""],["each_method","RefinementMonkey::MethodWrapper","classes/RefinementMonkey/MethodWrapper.html#method-c-each_method","(owner, source)",""],["fetch","RefinementMonkey::Repository","classes/RefinementMonkey/Repository.html#method-i-fetch","(sig)",""],["first","Object","classes/Object.html#method-i-first","(len = 1)","<p>String#first\n<p>len &mdash; Number of characters returned.\n\n<p>Examples\n"],["inspect","RefinementMonkey","classes/RefinementMonkey.html#method-i-inspect","()","<p>Inspects all registered methods.\n<p>Returns\n<p>Returns a inspected Array of all registered patches.\n"],["inspect","RefinementMonkey::MethodWrapper","classes/RefinementMonkey/MethodWrapper.html#method-i-inspect","()","<p>Composes method inspection.\n<p>Examples\n\n<pre><code>&quot;Monkey::MethodWrapper.each_method[2] at .../lib/refinement-monkey/method_wrapper.rb:6&quot; ...\n</code></pre>\n"],["inspect","RefinementMonkey::Repository","classes/RefinementMonkey/Repository.html#method-i-inspect","()",""],["instance_method","RefinementMonkey::MethodWrapper","classes/RefinementMonkey/MethodWrapper.html#method-c-instance_method","(owner, source, name)",""],["last","Object","classes/Object.html#method-i-last","(len = 1)","<p>String#last\n<p>len &mdash; Number of characters returned.\n\n<p>Examples\n"],["learn","RefinementMonkey","classes/RefinementMonkey.html#method-i-learn","(*names)","<p>Learn new patches, see RefinementMonkey::Teachings.\n<p>names &mdash; List of symbols.\n\n<p>Examples\n"],["max_of","Object","classes/Object.html#method-i-max_of","(key)",""],["min_of","Object","classes/Object.html#method-i-min_of","(key)",""],["new","RefinementMonkey","classes/RefinementMonkey.html#method-c-new","(path: nil)",""],["new","RefinementMonkey::MethodWrapper","classes/RefinementMonkey/MethodWrapper.html#method-c-new","(owner, target, callable)",""],["new","RefinementMonkey::Refinements","classes/RefinementMonkey/Refinements.html#method-c-new","(map)","<p>Build anonymous module.\n<p>Returns\n<p>Returns a Refinements module.\n"],["new","RefinementMonkey::Repository","classes/RefinementMonkey/Repository.html#method-c-new","()",""],["new","RefinementMonkey::Teachings","classes/RefinementMonkey/Teachings.html#method-c-new","(monkey, path: PATH)",""],["patch","RefinementMonkey","classes/RefinementMonkey.html#method-i-patch","(object, &block)","<p>Register a new patch.\n<p>object &mdash; The refined object (eg. Module, Class) or Method (also UnboundMethod).\n\n<p>Examples …\n"],["patches","RefinementMonkey","classes/RefinementMonkey.html#method-i-patches","()","<p>Loads all refinements into a Refinements module.\n<p>Examples\n\n<pre><code>using Monkey.patches\n</code></pre>\n"],["pretty_print","RefinementMonkey","classes/RefinementMonkey.html#method-i-pretty_print","(...)","<p>Support for PP output.\n<p>Returns\n<p>Returns a pretty printed Array of all registered patches.\n"],["pretty_print","RefinementMonkey::MethodWrapper","classes/RefinementMonkey/MethodWrapper.html#method-i-pretty_print","(q)",""],["pretty_print","RefinementMonkey::Repository","classes/RefinementMonkey/Repository.html#method-i-pretty_print","(...)",""],["read","RefinementMonkey::Teachings","classes/RefinementMonkey/Teachings.html#method-i-read","(name)",""],["sig","RefinementMonkey::MethodWrapper","classes/RefinementMonkey/MethodWrapper.html#method-i-sig","()","<p>Composes a method signature from owner’s and method’s name, but w/o arguments.\n<p>Examples\n\n<pre><code>&quot;Monkey::MethodWrapper.each_method&quot; ...\n</code></pre>\n"],["singleton_method","RefinementMonkey::MethodWrapper","classes/RefinementMonkey/MethodWrapper.html#method-c-singleton_method","(owner, source, name)",""],["to_s","RefinementMonkey","classes/RefinementMonkey.html#method-i-to_s","()","<p>Lists all signatures.\n<p>Returns\n<p>Returns all signatures of commited methods.\n"],["to_s","RefinementMonkey::MethodWrapper","classes/RefinementMonkey/MethodWrapper.html#method-i-to_s","()",""],["to_s","RefinementMonkey::Repository","classes/RefinementMonkey/Repository.html#method-i-to_s","()",""],["underscore","Object","classes/Object.html#method-i-underscore","()","<p>String#underscore\n<p>This method will also change <code>::</code> to <code>File::SEPARATOR</code> to convert namespaces to paths.\n<p>Examples …\n"],["values","RefinementMonkey::Repository","classes/RefinementMonkey/Repository.html#method-i-values","()",""],["values_at","RefinementMonkey::Repository","classes/RefinementMonkey/Repository.html#method-i-values_at","(owner)",""],["|","RefinementMonkey::Refinements","classes/RefinementMonkey/Refinements.html#method-i-7C","(other)","<p>Merge with another Refinments module.\n<p>other &mdash; Another Refinments module.\n\n<p>Examples\n"],["CHANGELOG","","files/CHANGELOG_md.html","","<p>[Unreleased]\n<p>[0.1.0] - 2022-02-07\n<p>Initial release\n"],["LICENSE","","files/LICENSE_txt.html","","<p>The MIT License (MIT)\n<p>Copyright © 2022 Florian Aßmann\n<p>Permission is hereby granted, free of charge, to …\n"],["README","","files/README_md.html","","<p>RefinementMonkey\n<p>Monkey that manages your refinements and helps you to refine them into unique refinement …\n"]]}}